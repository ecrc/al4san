/**
 *
 * @file al4san_starpu.h
 *
 * @copyright 2009-2014 The University of Tennessee and The University of
 *                      Tennessee Research Foundation. All rights reserved.
 * @copyright 2012-2016 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria,
 *                      Univ. Bordeaux. All rights reserved.
 * @copyright 2018 King Abdullah University of Science and Technology (KAUST). 
 *                      All rights reserved.
 ***
 *
 *
 * author Mathieu Faverge
 * author Cedric Castagnede
 * author Florent Pruvost
 * date 2011-06-01
 *
 * 
 * @brief AL4SAN StarPU runtime main header
 *
 *  AL4SAN is a software package provided by King Abdullah University of Science and Technology (KAUST)
 *
 * @version 1.1.0
 * @author Rabab Alomairy
 * @date 2019-02-06
 *
 **/
#ifndef _AL4SAN_STARPU_H_
#define _AL4SAN_STARPU_H_

#include "al4san/config.h"

/* StarPU options */
#cmakedefine HAVE_STARPU_FXT_PROFILING
#cmakedefine HAVE_STARPU_IDLE_PREFETCH
#cmakedefine HAVE_STARPU_ITERATION_PUSH
#cmakedefine HAVE_STARPU_DATA_WONT_USE
#cmakedefine HAVE_STARPU_DATA_SET_COORDINATES
#cmakedefine HAVE_STARPU_MALLOC_ON_NODE_SET_DEFAULT_FLAGS
#cmakedefine HAVE_STARPU_MPI_DATA_MIGRATE
#cmakedefine HAVE_STARPU_MPI_DATA_REGISTER
#cmakedefine HAVE_STARPU_MPI_COMM_RANK
#cmakedefine HAVE_STARPU_MPI_CACHED_RECEIVE
#cmakedefine HAVE_STARPU_MPI_COMM_GET_ATTR

#if defined(AL4SAN_USE_MPI)
#include <starpu_mpi.h>
#else
#include <starpu.h>
#endif

#include <starpu_profiling.h>

#if defined(AL4SAN_USE_CUDA) && !defined(AL4SAN_SIMULATION)
#include <starpu_scheduler.h>
#include <starpu_cuda.h>

#include <cublas.h>
#include <starpu_cublas.h>
#if defined(AL4SAN_USE_CUBLAS_V2)
#include <cublas_v2.h>
#include <starpu_cublas_v2.h>
#endif
#endif

#if defined(AL4SAN_SIMULATION)
# if !defined(STARPU_SIMGRID)
#  error "Starpu was not built with simgrid support (--enable-simgrid). Can not run Al4san with simulation support."
# endif
#else
# if defined(STARPU_SIMGRID)
#  warning "Starpu was built with simgrid support. Better build Al4san with simulation support (-DAL4SAN_SIMULATION=YES)."
# endif
#endif

#include "starpu_task.h"
#include "control/al4san_common.h"
#include "starpu_codelet.h"
#include "starpu_workspace.h"

BEGIN_C_DECLS
typedef struct starpu_conf starpu_conf_t;

/**/

/*
 * MPI Redefinitions
 */
#if defined(AL4SAN_USE_MPI)
#undef STARPU_REDUX
//#define starpu_insert_task(...) starpu_mpi_insert_task(MPI_COMM_WORLD, __VA_ARGS__)
#define starpu_insert_task starpu_mpi_insert_task
#define starpu_mpi_codelet(_codelet_) MPI_COMM_WORLD, _codelet_

#else

#define starpu_mpi_codelet(_codelet_) _codelet_

#endif

/*
 * cuBlasAPI v2 - StarPU enable the support for cublas handle
 */
#if defined(AL4SAN_USE_CUDA) && defined(AL4SAN_USE_CUBLAS_V2)
#define AL4SAN_Starpu_getStream(_stream_)                             \
    cublasHandle_t _stream_ = starpu_cublas_get_local_handle();
#else
#define AL4SAN_Starpu_getStream(_stream_)                             \
    cudaStream_t _stream_ = starpu_cuda_get_local_stream();     \
    cublasSetKernelStream( stream );

#endif

/*
 * Enable codelets names
 */
#if (STARPU_MAJOR_VERSION > 1) || ((STARPU_MAJOR_VERSION == 1) && (STARPU_MINOR_VERSION > 1))
#define AL4SAN_CODELETS_HAVE_NAME
#endif


typedef struct starpu_codelet al4san_starpu_codelet;


typedef struct al4san_starpu_arg_list_s
{
  void *cl_arg;
  void **descr;
}AL4SAN_Starpu_arg_list;

/**
 * Access to block pointer and leading dimension
 */
#define GET_STARPU_MACRO_ADDR(_1,_2,_3,_4, NAME,...) NAME
#define AL4SAN_STARPU_ADDR(...) GET_STARPU_MACRO_ADDR(__VA_ARGS__, AL4SAN_STARPU_ADDR4, AL4SAN_STARPU_ADDR3, AL4SAN_STARPU_ADDR2)(__VA_ARGS__)

#define AL4SAN_STARPU_ADDR4( desc, type, m, n ) ( (type*)AL4SAN_Starpu_data_getaddr( desc, m, n ) )
#define AL4SAN_STARPU_ADDR3( desc, type, m) ( (type*)AL4SAN_Starpu_data_getaddr( desc, m, 0 ) )
#define AL4SAN_STARPU_ADDR2( desc, type) ( (type*)AL4SAN_Starpu_data_getaddr( desc, 0, 0 ) )


//void AL4SAN_Starpu_set_reduction_methods(starpu_data_handle_t handle, al4san_flttype_t dtyp);

#define GET_MACRO_STARPU_ACCESS_WRITE_CACHED(_1,_2,_3, NAME,...) NAME
#define AL4SAN_STARPU_ACCESS_WRITE_CACHED(...) GET_MACRO_STARPU_ACCESS_WRITE_CACHED(__VA_ARGS__, AL4SAN_STARPU_ACCESS_WRITE_CACHED3, AL4SAN_STARPU_ACCESS_WRITE_CACHED2, AL4SAN_STARPU_ACCESS_WRITE_CACHED1)(__VA_ARGS__)

#if defined(AL4SAN_USE_MPI) && defined(HAVE_STARPU_MPI_CACHED_RECEIVE)
static inline int
al4san_starpu_data_iscached(const AL4SAN_desc_t *A, int m, int n)
{
    int64_t mm = m + (A->i / A->mb);
    int64_t nn = n + (A->j / A->nb);

    starpu_data_handle_t *ptrtile = A->schedopt;
    ptrtile += ((int64_t)A->lmt) * nn + mm;

    if (!(*ptrtile))
        return 0;

    return starpu_mpi_cached_receive(*ptrtile);
}


#define AL4SAN_STARPU_ACCESS_WRITE_CACHED3(A, Am, An) do {                 \
        if (al4san_starpu_data_iscached(A, Am, An)) __al4san_starpu_need_submit = 1; } while(0)

#define AL4SAN_STARPU_ACCESS_WRITE_CACHED2(A, Am) do {                 \
        if (al4san_starpu_data_iscached(A, Am, 0)) __al4san_starpu_need_submit = 1; } while(0)

#define AL4SAN_STARPU_ACCESS_WRITE_CACHED1(A) do {                 \
        if (al4san_starpu_data_iscached(A, 0, 0)) __al4san_starpu_need_submit = 1; } while(0)        

#else

#if defined(AL4SAN_USE_MPI)
#warning "WAR dependencies need starpu_mpi_cached_receive support from StarPU 1.2.1 or greater"
#endif
#define AL4SAN_STARPU_ACCESS_WRITE_CACHED3(A, Am, An) do {} while (0)
#define AL4SAN_STARPU_ACCESS_WRITE_CACHED2(A, Am) do {} while (0)
#define AL4SAN_STARPU_ACCESS_WRITE_CACHED1(A) do {} while (0)

#endif

#define GET_MACRO_STARPU_ACCESS_R(_1,_2,_3, NAME,...) NAME
#define AL4SAN_STARPU_ACCESS_R(...) GET_MACRO_STARPU_ACCESS_R(__VA_ARGS__, AL4SAN_STARPU_ACCESS_R3, AL4SAN_STARPU_ACCESS_R2, AL4SAN_STARPU_ACCESS_R1)(__VA_ARGS__)

#define GET_MACRO_STARPU_ACCESS_W(_1,_2,_3, NAME,...) NAME
#define AL4SAN_STARPU_ACCESS_W(...) GET_MACRO_STARPU_ACCESS_W(__VA_ARGS__, AL4SAN_STARPU_ACCESS_W3, AL4SAN_STARPU_ACCESS_W2, AL4SAN_STARPU_ACCESS_W1)(__VA_ARGS__)

#define GET_MACRO_STARPU_ACCESS_RW(_1,_2,_3, NAME,...) NAME
#define AL4SAN_STARPU_ACCESS_RW(...) GET_MACRO_STARPU_ACCESS_RW(__VA_ARGS__, AL4SAN_STARPU_ACCESS_RW3, AL4SAN_STARPU_ACCESS_RW2, AL4SAN_STARPU_ACCESS_RW1)(__VA_ARGS__)

#define GET_MACRO_STARPU_PRUNING_STATS_ACCESS_W(_1,_2,_3, NAME,...) NAME
#define AL4SAN_STARPU_PRUNING_STATS_ACCESS_W(...) GET_MACRO_STARPU_PRUNING_STATS_ACCESS_W(__VA_ARGS__, AL4SAN_STARPU_PRUNING_STATS_ACCESS_W3, AL4SAN_STARPU_PRUNING_STATS_ACCESS_W2, AL4SAN_STARPU_PRUNING_STATS_ACCESS_W1)(__VA_ARGS__)


#ifdef AL4SAN_ENABLE_PRUNING_STATS

#define AL4SAN_STARPU_PRUNING_STATS_BEGIN_ACCESS_DECLARATION \
    int __al4san_exec = 0; \
    int __al4san_changed = 0;

#define AL4SAN_STARPU_PRUNING_STATS_ACCESS_W3(A, Am, An) \
    if (al4san_desc_islocal(A, Am, An)) \
        __al4san_exec = 1;

#define AL4SAN_STARPU_PRUNING_STATS_ACCESS_W2(A, Am) \
    if (al4san_desc_islocal(A, Am, 0)) \
        __al4san_exec = 1;

#define AL4SAN_STARPU_PRUNING_STATS_ACCESS_W1(A) \
    if (al4san_desc_islocal(A, 0, 0)) \
        __al4san_exec = 1;        

#define AL4SAN_STARPU_PRUNING_STATS_END_ACCESS_DECLARATION \
    STARPU_total_tasks++; \
    if (__al4san_exec) \
        STARPU_exec_tasks++; \
    else if (__al4san_starpu_need_submit) \
        STARPU_comm_tasks++; \
    else if (__al4san_changed) \
        STARPU_changed_tasks++;

#define AL4SAN_STARPU_PRUNING_STATS_RANK_CHANGED(rank) \
    int __al4san_myrank; \
    AL4SAN_Starpu_comm_rank(&__al4san_myrank); \
    __al4san_exec = (rank) == __al4san_myrank; \
    __al4san_changed = 1; \

#else
#define AL4SAN_STARPU_PRUNING_STATS_BEGIN_ACCESS_DECLARATION
#define AL4SAN_STARPU_PRUNING_STATS_ACCESS_W3(A, Am, An)
#define AL4SAN_STARPU_PRUNING_STATS_ACCESS_W2(A, Am)
#define AL4SAN_STARPU_PRUNING_STATS_ACCESS_W1(A)
#define AL4SAN_STARPU_PRUNING_STATS_END_ACCESS_DECLARATION
#define AL4SAN_STARPU_PRUNING_STATS_RANK_CHANGED(rank)
#endif

#define AL4SAN_STARPU_BEGIN_ACCESS_DECLARATION        \
    AL4SAN_STARPU_PRUNING_STATS_BEGIN_ACCESS_DECLARATION

#define AL4SAN_STARPU_ACCESS_R3(A, Am, An)
#define AL4SAN_STARPU_ACCESS_R2(A, Am)
#define AL4SAN_STARPU_ACCESS_R1(A)


#define AL4SAN_STARPU_ACCESS_W3(A, Am, An)             \
    AL4SAN_STARPU_PRUNING_STATS_ACCESS_W(A, Am, An);  \
    AL4SAN_STARPU_ACCESS_WRITE_CACHED(A, Am, An)

#define AL4SAN_STARPU_ACCESS_W2(A, Am)             \
    AL4SAN_STARPU_PRUNING_STATS_ACCESS_W(A, Am, 0);  \
    AL4SAN_STARPU_ACCESS_WRITE_CACHED(A, Am, 0)

#define AL4SAN_STARPU_ACCESS_W1(A)             \
    AL4SAN_STARPU_PRUNING_STATS_ACCESS_W(A, 0, 0);  \
    AL4SAN_STARPU_ACCESS_WRITE_CACHED(A, 0, 0)

#define AL4SAN_STARPU_ACCESS_RW3(A, Am, An)            \
    AL4SAN_STARPU_PRUNING_STATS_ACCESS_W(A, Am, An);  \
    AL4SAN_STARPU_ACCESS_WRITE_CACHED(A, Am, An)

#define AL4SAN_STARPU_ACCESS_RW2(A, Am)            \
    AL4SAN_STARPU_PRUNING_STATS_ACCESS_W(A, Am, 0);  \
    AL4SAN_STARPU_ACCESS_WRITE_CACHED(A, Am, 0)

#define AL4SAN_STARPU_ACCESS_RW1(A)            \
    AL4SAN_STARPU_PRUNING_STATS_ACCESS_W(A, 0, 0);  \
    AL4SAN_STARPU_ACCESS_WRITE_CACHED(A, 0, 0)

#define AL4SAN_STARPU_RANK_CHANGED(rank)              \
    AL4SAN_STARPU_PRUNING_STATS_RANK_CHANGED(rank)

#define AL4SAN_STARPU_END_ACCESS_DECLARATION          \
    AL4SAN_STARPU_PRUNING_STATS_END_ACCESS_DECLARATION;

END_C_DECLS

#endif /* _AL4SAN_STARPU_H_ */
